// <auto-generated />
using System;
using EVErything.Business.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EVErything.Business.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190214054427_AddESIDataCache")]
    partial class AddESIDataCache
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EVErything.Business.Models.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EVErything.Business.Models.Character", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AccountID");

                    b.Property<Guid>("CharacterSetID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CharacterSetID");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("EVErything.Business.Models.CharacterSet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MainCharacterID");

                    b.HasKey("ID");

                    b.HasIndex("MainCharacterID");

                    b.ToTable("CharacterSets");
                });

            modelBuilder.Entity("EVErything.Business.Models.ESIDataCache", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharacterID")
                        .IsRequired();

                    b.Property<string>("Data")
                        .HasMaxLength(2147483647);

                    b.Property<string>("ESIRoute")
                        .IsRequired();

                    b.Property<string>("ESISource")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdateTimestamp");

                    b.HasKey("ID");

                    b.HasIndex("CharacterID");

                    b.ToTable("ESIDataCaches");
                });

            modelBuilder.Entity("EVErything.Business.Models.Token", b =>
                {
                    b.Property<string>("CharacterID");

                    b.Property<string>("AccessToken")
                        .IsRequired();

                    b.Property<int?>("ExpiresIn");

                    b.Property<string>("RefreshToken")
                        .IsRequired();

                    b.Property<string>("TokenType")
                        .IsRequired();

                    b.HasKey("CharacterID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("EVErything.Business.Models.Character", b =>
                {
                    b.HasOne("EVErything.Business.Models.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountID");

                    b.HasOne("EVErything.Business.Models.CharacterSet", "CharacterSet")
                        .WithMany()
                        .HasForeignKey("CharacterSetID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EVErything.Business.Models.CharacterSet", b =>
                {
                    b.HasOne("EVErything.Business.Models.Character", "MainCharacter")
                        .WithMany()
                        .HasForeignKey("MainCharacterID");
                });

            modelBuilder.Entity("EVErything.Business.Models.ESIDataCache", b =>
                {
                    b.HasOne("EVErything.Business.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EVErything.Business.Models.Token", b =>
                {
                    b.HasOne("EVErything.Business.Models.Character", "Character")
                        .WithOne("Token")
                        .HasForeignKey("EVErything.Business.Models.Token", "CharacterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
