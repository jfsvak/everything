/**
 * My API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import axios, { AxiosRequestConfig, AxiosPromise } from 'axios';

//let defaultBasePath = 'https://localhost';
let defaultBasePath = '/case';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class AgreementContribution {
}

export class AgreementOverview {
    'employeeCount': number;
    'employeesOnLeave': number;
    'employeesMissingSalaryData': number;
    'noPersonalizationCollection': Array<EmployeeSummaryInfo>;
    'noSalaryDataCollection': Array<EmployeeSummaryInfo>;
    'noVoluntaryContributionCollection': Array<EmployeeSummaryInfo>;
}

export class Employee {
    'isMomoActivated': boolean;
    'cpr': string;
    'disabilityPct': number;
    'email': string;
    'employerContribution': number;
    'employeeMandatoryContribution': number;
    'employeeVoluntaryContribution': number;
    'inviteCode': string;
    'monthlySalary': number;
    'name': string;
    'legalPartyUidCq': string;
    'phoneNumber': string;
}

export class EmployeeContribution {
    'employerContribution': number;
    'employeeMandatoryContribution': number;
    'employeeVoluntaryContribution': number;
    'yearlySalary': number;
}

export class EmployeeOverview {
    'isMomoActivated': boolean;
    'isInfoStatus': boolean;
    'cpr': string;
    'name': string;
    'inviteCode': string;
    'employerContribution': number;
    'employeeMandatoryContribution': number;
    'employeeVoluntaryContribution': number;
    'legalPartyUidCq': string;
}

export class EmployeeSummaryInfo {
    'name': string;
    'legalPartyUidCq': string;
}

export class Notification {
    'notificationId': string;
    'createTime': Date;
    'notificationType': string;
}

export class Signup {
    'cpr': string;
    'name': string;
    'email': string;
    'phoneNumber': string;
    'monthlySalary': number;
    'employerContribution': number;
    'employeeMandatoryContribution': number;
}


export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: AxiosRequestConfig): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: AxiosRequestConfig): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: AxiosRequestConfig): void {
        if (this.location == "query") {
            (<any>requestOptions.params)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: AxiosRequestConfig): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: AxiosRequestConfig): void {
        // Do nothing
    }
}

export enum EmployeeApiApiKeys {
}

export class EmployeeApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: EmployeeApiApiKeys, value: string) {
        this.authentications[EmployeeApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     */
    public apiEmployeeContributionGet () : AxiosPromise {
        const localVarPath = this.basePath + '/api/Employee/contribution';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param spouseYearlySalary 
     * @param dpMaritalStatus 
     * @param spouseName 
     */
    public apiEmployeeMaritalstatusPost (spouseYearlySalary: number, dpMaritalStatus: string, spouseName?: string) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Employee/maritalstatus';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'spouseYearlySalary' is not null or undefined
        if (spouseYearlySalary === null || spouseYearlySalary === undefined) {
            throw new Error('Required parameter spouseYearlySalary was null or undefined when calling apiEmployeeMaritalstatusPost.');
        }

        // verify required parameter 'dpMaritalStatus' is not null or undefined
        if (dpMaritalStatus === null || dpMaritalStatus === undefined) {
            throw new Error('Required parameter dpMaritalStatus was null or undefined when calling apiEmployeeMaritalstatusPost.');
        }

        if (spouseName !== undefined) {
            queryParameters['spouseName'] = spouseName;
        }

        if (spouseYearlySalary !== undefined) {
            queryParameters['spouseYearlySalary'] = spouseYearlySalary;
        }

        if (dpMaritalStatus !== undefined) {
            queryParameters['dpMaritalStatus'] = dpMaritalStatus;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public apiEmployeeNotificationDelete (id?: string) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Employee/notification';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (id !== undefined) {
            queryParameters['id'] = id;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'DELETE',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     */
    public apiEmployeeNotificationGet () : AxiosPromise {
        const localVarPath = this.basePath + '/api/Employee/notification';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param employeeVoluntaryContribution 
     * @param disabilityPctOfSalary 
     */
    public apiEmployeePolicyPost (employeeVoluntaryContribution: number, disabilityPctOfSalary: number) : AxiosPromise {
        const localVarPath = this.basePath + '/api/Employee/policy';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'employeeVoluntaryContribution' is not null or undefined
        if (employeeVoluntaryContribution === null || employeeVoluntaryContribution === undefined) {
            throw new Error('Required parameter employeeVoluntaryContribution was null or undefined when calling apiEmployeePolicyPost.');
        }

        // verify required parameter 'disabilityPctOfSalary' is not null or undefined
        if (disabilityPctOfSalary === null || disabilityPctOfSalary === undefined) {
            throw new Error('Required parameter disabilityPctOfSalary was null or undefined when calling apiEmployeePolicyPost.');
        }

        if (employeeVoluntaryContribution !== undefined) {
            queryParameters['employeeVoluntaryContribution'] = employeeVoluntaryContribution;
        }

        if (disabilityPctOfSalary !== undefined) {
            queryParameters['disabilityPctOfSalary'] = disabilityPctOfSalary;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
export enum SalaryAdminApiApiKeys {
}

export class SalaryAdminApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: SalaryAdminApiApiKeys, value: string) {
        this.authentications[SalaryAdminApiApiKeys[key]].apiKey = value;
    }

    /**
     * 
     * 
     */
    public apiSalaryAdminAgreementContributionGet () : AxiosPromise {
        const localVarPath = this.basePath + '/api/SalaryAdmin/agreement/contribution';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     */
    public apiSalaryAdminAgreementOverviewGet () : AxiosPromise {
        const localVarPath = this.basePath + '/api/SalaryAdmin/agreement/overview';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     */
    public apiSalaryAdminEmployeeDetailsGet (id?: string) : AxiosPromise {
        const localVarPath = this.basePath + '/api/SalaryAdmin/employee/details';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (id !== undefined) {
            queryParameters['id'] = id;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param id 
     * @param body 
     */
    public apiSalaryAdminEmployeeDetailsPut (id?: string, body?: Employee) : AxiosPromise {
        const localVarPath = this.basePath + '/api/SalaryAdmin/employee/details';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        if (id !== undefined) {
            queryParameters['id'] = id;
        }

        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'PUT',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
            data: body,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     */
    public apiSalaryAdminEmployeeGet () : AxiosPromise {
        const localVarPath = this.basePath + '/api/SalaryAdmin/employee';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'GET',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
    /**
     * 
     * 
     * @param body 
     */
    public apiSalaryAdminEmployeePost (body?: Signup) : AxiosPromise {
        const localVarPath = this.basePath + '/api/SalaryAdmin/employee';
        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: AxiosRequestConfig = {
            method: 'POST',
            params: queryParameters,
            headers: headerParams,
            url: localVarPath,
            responseType: 'json',
            data: body,
        };

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.data = formParams;
            }
        }
        return axios(requestOptions);
    }
}
